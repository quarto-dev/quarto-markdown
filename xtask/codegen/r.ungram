// R Un-Grammar.
//
// This grammar specifies the structure of R's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //                          -- comment
//   Name =                      -- non-terminal definition
//   'ident'                     -- token (terminal)
//   A B                         -- sequence
//   A | B                       -- alternation
//   A*                          -- zero or more repetition
//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)                -- repetition of node A separated by ',' without a trailing comma
//   A?                          -- zero or one repetition
//   (A)                         -- same as A
//   label:A                     -- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree

// ----------------------------------------------------------------
// Initial

SyntaxElement = SyntaxElement

// ----------------------------------------------------------------
// Bogus

RBogus = SyntaxElement*
RBogusValue = SyntaxElement*
RBogusExpression = SyntaxElement*

// ----------------------------------------------------------------
// Root

RRoot =
	bom: 'UNICODE_BOM'?
	expressions: RExpressionList
	eof: 'EOF'

// ----------------------------------------------------------------
// Operators

RUnaryExpression =
  operator: ('+' | '-' | '~' | '!' | '?')
  argument: AnyRExpression

RBinaryExpression =
	left: AnyRExpression
    operator: (
		'?' |
		':' |
		'~' |

		'<-' |
		'<<-' |
		':=' |
		'->' |
		'->>' |
		'=' |

		'|' |
		'&' |
		'||' |
		'&&' |

		'<' |
		'<=' |
		'>' |
		'>=' |
		'==' |
		'!=' |

		'+' |
		'-' |
		'*' |
		'/' |

		'^' |
		'**' |

		'|>' |
		'special'
	)
	right: AnyRExpression

// Binary expression that is restricted on the RHS
RExtractExpression =
	left: AnyRExpression
	operator: ('$' | '@')
	right: AnyRSelector

// Binary expression that is restricted on both the LHS and RHS
RNamespaceExpression =
	left: AnyRSelector
	operator: ('::' | ':::')
	right: AnyRSelector

AnyRSelector =
	RIdentifier
	| RStringValue
	| RDots
	| RDotDotI

// ----------------------------------------------------------------
// Function

RFunctionDefinition =
	name: ('function' | '\\')
	parameters: RParameters
	body: AnyRExpression

RParameters =
	'('
	items: RParameterList
	')'

RParameterList = (RParameter (',' RParameter)*)

RParameter =
	name: AnyRParameterName
	default: RParameterDefault?

// TODO: tree-sitter-r currently allows the `value` to be optional,
// but R's parser doesn't allow this. We plan to make it required,
// so we go ahead and do that here.
// https://github.com/r-lib/tree-sitter-r/issues/161

RParameterDefault =
	'='
	value: AnyRExpression

AnyRParameterName =
	RIdentifier
	| RDots
	| RDotDotI

// ----------------------------------------------------------------
// If statement

RIfStatement =
	'if'
	'('
	condition: AnyRExpression
	')'
	consequence: AnyRExpression
	else_clause: RElseClause?

RElseClause =
	'else'
	alternative: AnyRExpression

// ----------------------------------------------------------------
// For statement

RForStatement =
	'for'
	'('
	variable: RIdentifier
	'in'
	sequence: AnyRExpression
	')'
	body: AnyRExpression

// ----------------------------------------------------------------
// While statement

RWhileStatement =
	'while'
	'('
	condition: AnyRExpression
	')'
	body: AnyRExpression

// ----------------------------------------------------------------
// Repeat statement

RRepeatStatement =
	'repeat'
	body: AnyRExpression

// ----------------------------------------------------------------
// Braced expressions

RBracedExpressions =
	'{'
	expressions: RExpressionList
	'}'

// ----------------------------------------------------------------
// Parenthesized expressions

RParenthesizedExpression =
	'('
	body: AnyRExpression
	')'

// ----------------------------------------------------------------
// Call / Subset / Subset2

RCall =
	function: AnyRExpression
	arguments: RCallArguments

RCallArguments =
	'('
	items: RArgumentList
	')'

RSubset =
	function: AnyRExpression
	arguments: RSubsetArguments

RSubsetArguments =
	'['
	items: RArgumentList
	']'

RSubset2 =
	function: AnyRExpression
	arguments: RSubset2Arguments

RSubset2Arguments =
	'[['
	items: RArgumentList
	']]'

// We want to allow:
// - Any number of sequential commas
// - But two arguments must be separated by at least 1 comma
//
// We implement this by allowing both the `name_clause` and
// the `value` to be optional. In the parser, when we see a
// hole we open an `RArgument` node and then immediately
// close it without pushing any children.
//
// # Allowed
// fn()
// fn(,)
// fn(,,)
// fn(a)
// fn(a, b)
// fn(,,a,,b,,)
// fn(a, # comment_between_commas
// ,)
//
// # Not allowed
// fn(a b)
RArgumentList = (RArgument (',' RArgument)*)

RArgument =
	name_clause: RArgumentNameClause?
	value: AnyRExpression?

RArgumentNameClause =
	name: AnyRArgumentName
	'='

AnyRArgumentName =
	RIdentifier
	| RStringValue
	| RDots
	| RDotDotI

// ----------------------------------------------------------------
// Expression

RExpressionList = AnyRExpression*

AnyRExpression =
	AnyRValue
	| RIdentifier
	| RUnaryExpression
	| RBinaryExpression
	| RExtractExpression
    | RNamespaceExpression
	| RFunctionDefinition
	| RIfStatement
	| RForStatement
	| RWhileStatement
	| RRepeatStatement
	| RBracedExpressions
	| RParenthesizedExpression
	| RCall
	| RSubset
	| RSubset2
	| RReturnExpression
	| RNextExpression
	| RBreakExpression
	| RTrueExpression
	| RFalseExpression
	| RNullExpression
	| RInfExpression
	| RNanExpression
	| RNaExpression
	| RDots
	| RDotDotI
	| RBogusExpression

// ----------------------------------------------------------------
// Value

AnyRValue =
	RIntegerValue
	| RDoubleValue
	| RComplexValue
	| RStringValue
	| RBogusValue

RIntegerValue = value: 'r_integer_literal'
RDoubleValue = value: 'r_double_literal'
RComplexValue = value: 'r_complex_literal'
RStringValue = value: 'r_string_literal'

// ----------------------------------------------------------------
// Keywords

RReturnExpression = 'return'

RNextExpression = 'next'

RBreakExpression = 'break'

RTrueExpression = 'true'

RFalseExpression = 'false'

RNullExpression = 'null'

RInfExpression = 'inf'

RNanExpression = 'nan'

RNaExpression =
	value: (
		'na_logical'
		| 'na_integer'
		| 'na_double'
		| 'na_complex'
		| 'na_character'
	)

// ----------------------------------------------------------------
// Dots

RDots = value: '...'

RDotDotI = value: 'dotdoti'

// ----------------------------------------------------------------
// Identifier

RIdentifier = name: 'ident'
